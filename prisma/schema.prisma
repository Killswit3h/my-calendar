generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Calendar {
  id          String       @id @default(cuid())
  name        String
  isPrivate   Boolean      @default(true)
  createdAt   DateTime     @default(now())
  events      Event[]
  shareTokens ShareToken[]
  todos       Todo[]
}

model Event {
  id                    String                 @id @default(cuid())
  calendarId            String
  title                 String
  description           String?
  allDay                Boolean                @default(false)
  location              String?
  employees             Json?
  invoiceNumber         String?
  type                  String?
  shift                 WorkShift?
  checklist             Json?
  startsAt              DateTime
  endsAt                DateTime
  attachmentData        Bytes?
  attachmentName        String?
  attachmentType        String?
  calendar              Calendar               @relation(fields: [calendarId], references: [id])
  quantities            EventQuantity[]
  inventoryReservations InventoryReservation[]
  inventoryCheckouts    InventoryCheckout[]    @relation("InventoryCheckoutEvent")

  @@index([calendarId, startsAt])
  @@index([endsAt])
  @@map("Event")
}

model PayItem {
  id          String          @id @default(cuid())
  number      String          @unique
  description String
  unit        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  quantities  EventQuantity[]
}

model EventQuantity {
  id          String   @id @default(cuid())
  eventId     String
  payItemId   String
  quantity    Decimal  @db.Decimal(18, 6)
  stationFrom String?
  stationTo   String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  payItem     PayItem  @relation(fields: [payItemId], references: [id])

  @@index([eventId])
  @@index([payItemId])
}

model Todo {
  id         String    @id @default(cuid())
  calendarId String
  title      String
  notes      String?
  done       Boolean   @default(false)
  type       EventType
  createdAt  DateTime  @default(now())
  calendar   Calendar  @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([calendarId, createdAt])
}

model ShareToken {
  id         String    @id @default(cuid())
  calendarId String
  role       ShareRole
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  calendar   Calendar  @relation(fields: [calendarId], references: [id], onDelete: Cascade)
}

model Holiday {
  id          String   @id @default(cuid())
  date        DateTime
  localName   String
  name        String
  countryCode String
  regions     String?
  types       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([date, countryCode])
}

model UserSetting {
  id           String  @id @default(cuid())
  userId       String  @unique
  showHolidays Boolean @default(true)
  countryCode  String  @default("US")
  useIcs       Boolean @default(false)
  icsUrl       String?
}

model ReportFile {
  id         String     @id @default(cuid())
  kind       ReportKind
  reportDate DateTime?
  weekStart  DateTime?
  weekEnd    DateTime?
  vendor     String?
  blobUrl    String
  bytes      Int
  createdAt  DateTime   @default(now())

  @@index([reportDate, vendor])
  @@index([weekStart, weekEnd, vendor], map: "ReportFile_week_vendor_idx")
}

model DailyReportSnapshot {
  id          String   @id @default(cuid())
  reportDate  DateTime
  vendor      String?
  payloadJson String
  createdAt   DateTime @default(now())

  @@index([reportDate, vendor])
}

model WeeklyReportRequest {
  id         String       @id @default(cuid())
  weekStart  DateTime
  weekEnd    DateTime
  vendor     String?
  status     WeeklyStatus @default(PENDING)
  createdAt  DateTime     @default(now())
  finishedAt DateTime?
  errorText  String?

  @@index([weekStart, weekEnd, vendor], map: "WeeklyReportRequest_week_vendor_idx")
}

model FdotCutoff {
  id         String   @id @default(cuid())
  year       Int
  cutoffDate DateTime @map("cutoff_date")
  label      String?
  createdBy  String?  @map("created_by")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([year, cutoffDate])
  @@map("fdot_cutoffs")
}

enum ShareRole {
  VIEWER
  EDITOR
}

enum EventType {
  GUARDRAIL
  FENCE
  TEMP_FENCE
  HANDRAIL
  ATTENUATOR
}

enum WorkShift {
  DAY
  NIGHT
}

enum InventoryCheckoutStatus {
  OPEN
  CLOSED
  LOST
  DAMAGED
}

enum InventoryLedgerReason {
  CHECKOUT
  RETURN
  ADJUST
  CONSUME
  TRANSFER
}

enum ReportKind {
  DAILY_PDF
  DAILY_XLSX
  WEEKLY_PDF
}

enum WeeklyStatus {
  PENDING
  SUCCESS
  ERROR
}

/**
 * -------------- Inventory ---------------
 */

model InventoryCategory {
  id        String          @id @default(cuid())
  name      String
  slug      String          @unique
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  items     InventoryItem[]
}

model InventoryLocation {
  id                String              @id @default(cuid())
  name              String
  code              String              @unique
  isTruck           Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  items             InventoryItem[]     @relation("DefaultLocation")
  stocks            InventoryStock[]
  checkoutsFrom     InventoryCheckout[] @relation("CheckoutFromLocation")
  checkoutsTo       InventoryCheckout[] @relation("CheckoutToLocation")
  returnsToLocation InventoryReturn[]   @relation("ReturnToLocation")
  ledgerFrom        InventoryLedger[]   @relation("LedgerFromLocation")
  ledgerTo          InventoryLedger[]   @relation("LedgerToLocation")
  transfersFrom     InventoryTransfer[] @relation("TransferFromLocation")
  transfersTo       InventoryTransfer[] @relation("TransferToLocation")
}

model InventoryItem {
  id                String                 @id @default(cuid())
  sku               String                 @unique
  name              String
  description       String?
  unit              String
  isConsumable      Boolean                @default(false)
  minStock          Int                    @default(0)
  barcode           String?                @unique
  categoryId        String?
  defaultLocationId String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  deletedAt         DateTime?
  category          InventoryCategory?     @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  defaultLocation   InventoryLocation?     @relation("DefaultLocation", fields: [defaultLocationId], references: [id], onDelete: SetNull)
  stocks            InventoryStock[]
  reservations      InventoryReservation[]
  checkouts         InventoryCheckout[]
  ledgers           InventoryLedger[]
  transfers         InventoryTransfer[]

  @@index([name])
}

model InventoryStock {
  id         String            @id @default(cuid())
  itemId     String
  locationId String
  qty        Int               @default(0)
  updatedAt  DateTime          @updatedAt
  item       InventoryItem     @relation(fields: [itemId], references: [id], onDelete: Restrict)
  location   InventoryLocation @relation(fields: [locationId], references: [id], onDelete: Restrict)

  @@unique([itemId, locationId])
  @@index([locationId])
}

model InventoryReservation {
  id        String        @id @default(cuid())
  itemId    String
  eventId   String
  qty       Int
  neededAt  DateTime
  notes     String?
  createdAt DateTime      @default(now())
  item      InventoryItem @relation(fields: [itemId], references: [id], onDelete: Restrict)
  event     Event         @relation(fields: [eventId], references: [id], onDelete: Restrict)

  @@index([itemId, neededAt])
  @@index([eventId])
}

model InventoryCheckout {
  id             String                  @id @default(cuid())
  itemId         String
  qty            Int
  fromLocationId String
  toEmployeeId   String?
  toEventId      String?
  toLocationId   String?
  dueAt          DateTime?
  checkedOutById String
  checkedOutAt   DateTime                @default(now())
  status         InventoryCheckoutStatus @default(OPEN)
  closedAt       DateTime?
  item           InventoryItem           @relation(fields: [itemId], references: [id], onDelete: Restrict)
  fromLocation   InventoryLocation       @relation("CheckoutFromLocation", fields: [fromLocationId], references: [id], onDelete: Restrict)
  toLocation     InventoryLocation?      @relation("CheckoutToLocation", fields: [toLocationId], references: [id], onDelete: SetNull)
  toEvent        Event?                  @relation("InventoryCheckoutEvent", fields: [toEventId], references: [id], onDelete: SetNull)
  returns        InventoryReturn[]

  @@index([itemId])
  @@index([toEventId])
}

model InventoryReturn {
  id            String            @id @default(cuid())
  checkoutId    String
  qty           Int
  toLocationId  String
  condition     String?
  notes         String?
  photoUrl      String?
  checkedInById String
  checkedInAt   DateTime          @default(now())
  checkout      InventoryCheckout @relation(fields: [checkoutId], references: [id], onDelete: Restrict)
  toLocation    InventoryLocation @relation("ReturnToLocation", fields: [toLocationId], references: [id], onDelete: Restrict)

  @@index([checkoutId])
}

model InventoryLedger {
  id             String                @id @default(cuid())
  itemId         String
  deltaQty       Int
  fromLocationId String?
  toLocationId   String?
  reason         InventoryLedgerReason
  refType        String?
  refId          String?
  actorId        String?
  at             DateTime              @default(now())
  notes          String?
  item           InventoryItem         @relation(fields: [itemId], references: [id], onDelete: Restrict)
  fromLocation   InventoryLocation?    @relation("LedgerFromLocation", fields: [fromLocationId], references: [id], onDelete: SetNull)
  toLocation     InventoryLocation?    @relation("LedgerToLocation", fields: [toLocationId], references: [id], onDelete: SetNull)

  @@index([itemId, at])
}

model Rfi {
  id         String    @id @default(cuid())
  project    String
  subject    String
  assignedTo String?
  status     String
  dueDate    DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([project, status])
}

model ChangeOrder {
  id          String    @id @default(cuid())
  project     String
  title       String
  amount      Decimal?  @db.Decimal(12, 2)
  status      String
  submittedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([project, status])
}

model PurchaseOrder {
  id         String    @id @default(cuid())
  poNumber   String    @unique
  project    String
  vendor     String
  status     String
  expectedOn DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([status])
}

model InventoryTransfer {
  id             String            @id @default(cuid())
  itemId         String
  fromLocationId String
  toLocationId   String
  qty            Int
  status         String
  requestedAt    DateTime          @default(now())
  fulfilledAt    DateTime?
  notes          String?
  item           InventoryItem     @relation(fields: [itemId], references: [id], onDelete: Restrict)
  fromLocation   InventoryLocation @relation("TransferFromLocation", fields: [fromLocationId], references: [id], onDelete: Restrict)
  toLocation     InventoryLocation @relation("TransferToLocation", fields: [toLocationId], references: [id], onDelete: Restrict)

  @@index([status])
  @@index([itemId])
}

model Certification {
  id            String    @id @default(cuid())
  employeeName  String
  certification String
  status        String
  expiresOn     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([status, expiresOn])
}

model Vehicle {
  id            String    @id @default(cuid())
  unit          String
  status        String
  location      String?
  nextServiceOn DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([status])
  @@index([nextServiceOn])
}
