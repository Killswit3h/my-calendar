// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")   // pooled URL (runtime)
  directUrl = env("DIRECT_URL")     // direct URL (migrate/CLI)
}

model Customer {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Calendar {
  id          String       @id @default(cuid())
  name        String
  isPrivate   Boolean      @default(true)
  createdAt   DateTime     @default(now())
  events      Event[]
  shareTokens ShareToken[]
  todos       Todo[]
}

model Event {
  id             String    @id @default(cuid())
  calendarId     String
  title          String
  description    String?

  // Map to existing DB columns
  startsAt       DateTime
  endsAt         DateTime

  allDay         Boolean   @default(true)
  location       String?
  createdAt      DateTime? @default(now()) @ignore
  attachmentData Bytes?
  attachmentName String?
  attachmentType String?
  type           EventType?
  shift          WorkShift?
  checklist      Json?

  calendar       Calendar  @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  // Use model field names in indexes
  @@index([calendarId, startsAt])
  @@map("Event")
}

model Todo {
  id         String    @id @default(cuid())
  calendarId String
  title      String
  notes      String?
  done       Boolean   @default(false)
  type       EventType
  createdAt  DateTime  @default(now())
  calendar   Calendar  @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  @@index([calendarId, createdAt])
}

model ShareToken {
  id         String    @id @default(cuid())
  calendarId String
  role       ShareRole
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  calendar   Calendar  @relation(fields: [calendarId], references: [id], onDelete: Cascade)
}

model Holiday {
  id          String   @id @default(cuid())
  date        DateTime
  localName   String
  name        String
  countryCode String
  regions     String?
  types       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([date, countryCode])
}

model UserSetting {
  id           String  @id @default(cuid())
  userId       String  @unique
  showHolidays Boolean @default(true)
  countryCode  String  @default("US")
  useIcs       Boolean @default(false)
  icsUrl       String?
}

/* -------------- Enums --------------- */

enum ShareRole {
  VIEWER
  EDITOR
}

enum EventType {
  GUARDRAIL
  FENCE
  TEMP_FENCE
  HANDRAIL
  ATTENUATOR
}

enum WorkShift {
  DAY
  NIGHT
}

/* -------------- Reports --------------- */

model ReportFile {
  id         String      @id @default(cuid())
  kind       ReportKind
  reportDate DateTime?
  weekStart  DateTime?
  weekEnd    DateTime?
  vendor     String?
  blobUrl    String
  bytes      Int
  createdAt  DateTime    @default(now())

  @@index([reportDate, vendor])
  @@index([weekStart, weekEnd, vendor])
}

model DailyReportSnapshot {
  id          String    @id @default(cuid())
  reportDate  DateTime
  vendor      String?
  payloadJson String
  createdAt   DateTime  @default(now())

  @@index([reportDate, vendor])
}

model WeeklyReportRequest {
  id         String         @id @default(cuid())
  weekStart  DateTime
  weekEnd    DateTime
  vendor     String?
  status     WeeklyStatus   @default(PENDING)
  createdAt  DateTime       @default(now())
  finishedAt DateTime?
  errorText  String?

  @@index([weekStart, weekEnd, vendor])
}

enum ReportKind {
  DAILY_PDF
  DAILY_XLSX
  WEEKLY_PDF
}

enum WeeklyStatus {
  PENDING
  SUCCESS
  ERROR
}
